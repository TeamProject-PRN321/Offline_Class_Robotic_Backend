// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using OfficeClassRobotic.OfficeClassRobotic.BuisnessObject.DBContext;

#nullable disable

namespace OfficeClassRobotic.BuisnessObject.Migrations
{
    [DbContext(typeof(ApplicationDBContext))]
    [Migration("20240308040908_DB0803_v1")]
    partial class DB0803_v1
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Models.OfficeClassRobotic.BuisnessObject.Admin", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AppUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreateBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AppUserId");

                    b.ToTable("Admins");

                    b.HasData(
                        new
                        {
                            Id = new Guid("08b501c4-15dd-4b28-91fd-1ecee81e7e6d"),
                            AppUserId = new Guid("da053af4-cdf1-4a6b-8506-2e3939ef6351"),
                            Created = new DateTime(2024, 3, 8, 11, 9, 7, 880, DateTimeKind.Local).AddTicks(4471),
                            IsDeleted = false
                        });
                });

            modelBuilder.Entity("Models.OfficeClassRobotic.BuisnessObject.AppUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("date");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("PassWordHash")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<byte[]>("PassWordSalt")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhotoUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("AppUsers");

                    b.HasData(
                        new
                        {
                            Id = new Guid("24e95dd3-0442-41e9-bad7-ea4e207a8703"),
                            Address = "62 Long An",
                            DateOfBirth = new DateTime(1990, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "at050801@gmail.com",
                            FullName = "Tran Thien Quoc Anh",
                            Gender = "Male",
                            PassWordHash = new byte[] { 240, 161, 104, 101, 92, 87, 219, 144, 3, 38, 110, 185, 105, 7, 106, 1, 139, 149, 102, 193, 121, 69, 158, 216, 48, 93, 196, 175, 56, 253, 184, 196, 145, 44, 27, 156, 32, 27, 172, 98, 220, 167, 45, 222, 179, 134, 33, 122, 61, 14, 91, 11, 6, 47, 17, 45, 2, 254, 131, 213, 63, 92, 79, 194 },
                            PassWordSalt = new byte[] { 36, 139, 73, 47, 115, 180, 117, 30, 239, 56, 252, 44, 140, 112, 36, 75, 156, 80, 205, 43, 65, 172, 240, 146, 228, 106, 83, 34, 215, 56, 191, 55, 135, 11, 200, 8, 8, 236, 17, 153, 138, 26, 93, 214, 77, 58, 87, 35, 228, 89, 230, 177, 153, 175, 157, 154, 238, 134, 95, 200, 249, 104, 114, 177, 249, 68, 237, 91, 235, 122, 114, 159, 198, 203, 156, 227, 153, 149, 247, 74, 139, 55, 210, 142, 195, 22, 152, 208, 210, 52, 75, 185, 115, 214, 32, 47, 47, 122, 217, 72, 182, 13, 72, 110, 146, 175, 27, 39, 69, 102, 98, 26, 6, 3, 207, 123, 47, 33, 132, 56, 146, 82, 2, 226, 182, 223, 167, 189 },
                            PhoneNumber = "0358582251",
                            PhotoUrl = "050801quocanhdepchoai",
                            UserName = "anhttq"
                        },
                        new
                        {
                            Id = new Guid("2a22d7f6-6d94-4587-84d2-921c78970a91"),
                            Address = "23 Hcm",
                            DateOfBirth = new DateTime(1990, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "nguyenthanhn537@gmail.com",
                            FullName = "Nguyen Thanh Nhan",
                            Gender = "Male",
                            PassWordHash = new byte[] { 240, 161, 104, 101, 92, 87, 219, 144, 3, 38, 110, 185, 105, 7, 106, 1, 139, 149, 102, 193, 121, 69, 158, 216, 48, 93, 196, 175, 56, 253, 184, 196, 145, 44, 27, 156, 32, 27, 172, 98, 220, 167, 45, 222, 179, 134, 33, 122, 61, 14, 91, 11, 6, 47, 17, 45, 2, 254, 131, 213, 63, 92, 79, 194 },
                            PassWordSalt = new byte[] { 36, 139, 73, 47, 115, 180, 117, 30, 239, 56, 252, 44, 140, 112, 36, 75, 156, 80, 205, 43, 65, 172, 240, 146, 228, 106, 83, 34, 215, 56, 191, 55, 135, 11, 200, 8, 8, 236, 17, 153, 138, 26, 93, 214, 77, 58, 87, 35, 228, 89, 230, 177, 153, 175, 157, 154, 238, 134, 95, 200, 249, 104, 114, 177, 249, 68, 237, 91, 235, 122, 114, 159, 198, 203, 156, 227, 153, 149, 247, 74, 139, 55, 210, 142, 195, 22, 152, 208, 210, 52, 75, 185, 115, 214, 32, 47, 47, 122, 217, 72, 182, 13, 72, 110, 146, 175, 27, 39, 69, 102, 98, 26, 6, 3, 207, 123, 47, 33, 132, 56, 146, 82, 2, 226, 182, 223, 167, 189 },
                            PhoneNumber = "0912345678",
                            PhotoUrl = "132564487asjdhkahsdkj",
                            UserName = "nhannt"
                        },
                        new
                        {
                            Id = new Guid("bf835a7d-d002-4c9f-8bd6-0e2d321447c4"),
                            Address = "23 Hcm",
                            DateOfBirth = new DateTime(1990, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "vinnt537@gmail.com",
                            FullName = "Nguyen Ngoc Thai Vi",
                            Gender = "Male",
                            PassWordHash = new byte[] { 240, 161, 104, 101, 92, 87, 219, 144, 3, 38, 110, 185, 105, 7, 106, 1, 139, 149, 102, 193, 121, 69, 158, 216, 48, 93, 196, 175, 56, 253, 184, 196, 145, 44, 27, 156, 32, 27, 172, 98, 220, 167, 45, 222, 179, 134, 33, 122, 61, 14, 91, 11, 6, 47, 17, 45, 2, 254, 131, 213, 63, 92, 79, 194 },
                            PassWordSalt = new byte[] { 36, 139, 73, 47, 115, 180, 117, 30, 239, 56, 252, 44, 140, 112, 36, 75, 156, 80, 205, 43, 65, 172, 240, 146, 228, 106, 83, 34, 215, 56, 191, 55, 135, 11, 200, 8, 8, 236, 17, 153, 138, 26, 93, 214, 77, 58, 87, 35, 228, 89, 230, 177, 153, 175, 157, 154, 238, 134, 95, 200, 249, 104, 114, 177, 249, 68, 237, 91, 235, 122, 114, 159, 198, 203, 156, 227, 153, 149, 247, 74, 139, 55, 210, 142, 195, 22, 152, 208, 210, 52, 75, 185, 115, 214, 32, 47, 47, 122, 217, 72, 182, 13, 72, 110, 146, 175, 27, 39, 69, 102, 98, 26, 6, 3, 207, 123, 47, 33, 132, 56, 146, 82, 2, 226, 182, 223, 167, 189 },
                            PhoneNumber = "0912345678",
                            PhotoUrl = "132564487asjdhkahsdkj",
                            UserName = "vinnt"
                        },
                        new
                        {
                            Id = new Guid("45b82e13-b1fc-425d-a2b3-8b821405bfd0"),
                            Address = "23 Hcm",
                            DateOfBirth = new DateTime(1990, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "lylynp537@gmail.com",
                            FullName = "Nguyen Phuong LyLy",
                            Gender = "Female",
                            PassWordHash = new byte[] { 240, 161, 104, 101, 92, 87, 219, 144, 3, 38, 110, 185, 105, 7, 106, 1, 139, 149, 102, 193, 121, 69, 158, 216, 48, 93, 196, 175, 56, 253, 184, 196, 145, 44, 27, 156, 32, 27, 172, 98, 220, 167, 45, 222, 179, 134, 33, 122, 61, 14, 91, 11, 6, 47, 17, 45, 2, 254, 131, 213, 63, 92, 79, 194 },
                            PassWordSalt = new byte[] { 36, 139, 73, 47, 115, 180, 117, 30, 239, 56, 252, 44, 140, 112, 36, 75, 156, 80, 205, 43, 65, 172, 240, 146, 228, 106, 83, 34, 215, 56, 191, 55, 135, 11, 200, 8, 8, 236, 17, 153, 138, 26, 93, 214, 77, 58, 87, 35, 228, 89, 230, 177, 153, 175, 157, 154, 238, 134, 95, 200, 249, 104, 114, 177, 249, 68, 237, 91, 235, 122, 114, 159, 198, 203, 156, 227, 153, 149, 247, 74, 139, 55, 210, 142, 195, 22, 152, 208, 210, 52, 75, 185, 115, 214, 32, 47, 47, 122, 217, 72, 182, 13, 72, 110, 146, 175, 27, 39, 69, 102, 98, 26, 6, 3, 207, 123, 47, 33, 132, 56, 146, 82, 2, 226, 182, 223, 167, 189 },
                            PhoneNumber = "0912345678",
                            PhotoUrl = "132564487asjdhkahsdkj",
                            UserName = "lylynp"
                        },
                        new
                        {
                            Id = new Guid("da053af4-cdf1-4a6b-8506-2e3939ef6351"),
                            Address = "Long An",
                            DateOfBirth = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "vinnt060402@gmail.com",
                            FullName = "Nguyễn Ngọc Thái Vĩ",
                            Gender = "Male",
                            PassWordHash = new byte[] { 214, 60, 177, 33, 255, 41, 161, 124, 50, 17, 187, 147, 154, 47, 205, 117, 90, 238, 120, 171, 28, 82, 140, 248, 10, 40, 122, 147, 208, 92, 198, 194, 203, 132, 140, 228, 178, 247, 187, 155, 212, 71, 237, 21, 31, 96, 148, 225, 110, 185, 253, 39, 55, 188, 250, 115, 127, 113, 175, 37, 163, 93, 107, 65 },
                            PassWordSalt = new byte[] { 36, 139, 73, 47, 115, 180, 117, 30, 239, 56, 252, 44, 140, 112, 36, 75, 156, 80, 205, 43, 65, 172, 240, 146, 228, 106, 83, 34, 215, 56, 191, 55, 135, 11, 200, 8, 8, 236, 17, 153, 138, 26, 93, 214, 77, 58, 87, 35, 228, 89, 230, 177, 153, 175, 157, 154, 238, 134, 95, 200, 249, 104, 114, 177, 249, 68, 237, 91, 235, 122, 114, 159, 198, 203, 156, 227, 153, 149, 247, 74, 139, 55, 210, 142, 195, 22, 152, 208, 210, 52, 75, 185, 115, 214, 32, 47, 47, 122, 217, 72, 182, 13, 72, 110, 146, 175, 27, 39, 69, 102, 98, 26, 6, 3, 207, 123, 47, 33, 132, 56, 146, 82, 2, 226, 182, 223, 167, 189 },
                            PhoneNumber = "0123456789",
                            PhotoUrl = "abc",
                            UserName = "vinnt060402"
                        },
                        new
                        {
                            Id = new Guid("275c605e-3d04-437d-8a7d-208249412cec"),
                            Address = "Long An",
                            DateOfBirth = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "vi1@gmail.com",
                            FullName = "Vĩ 1",
                            Gender = "Male",
                            PassWordHash = new byte[] { 214, 60, 177, 33, 255, 41, 161, 124, 50, 17, 187, 147, 154, 47, 205, 117, 90, 238, 120, 171, 28, 82, 140, 248, 10, 40, 122, 147, 208, 92, 198, 194, 203, 132, 140, 228, 178, 247, 187, 155, 212, 71, 237, 21, 31, 96, 148, 225, 110, 185, 253, 39, 55, 188, 250, 115, 127, 113, 175, 37, 163, 93, 107, 65 },
                            PassWordSalt = new byte[] { 36, 139, 73, 47, 115, 180, 117, 30, 239, 56, 252, 44, 140, 112, 36, 75, 156, 80, 205, 43, 65, 172, 240, 146, 228, 106, 83, 34, 215, 56, 191, 55, 135, 11, 200, 8, 8, 236, 17, 153, 138, 26, 93, 214, 77, 58, 87, 35, 228, 89, 230, 177, 153, 175, 157, 154, 238, 134, 95, 200, 249, 104, 114, 177, 249, 68, 237, 91, 235, 122, 114, 159, 198, 203, 156, 227, 153, 149, 247, 74, 139, 55, 210, 142, 195, 22, 152, 208, 210, 52, 75, 185, 115, 214, 32, 47, 47, 122, 217, 72, 182, 13, 72, 110, 146, 175, 27, 39, 69, 102, 98, 26, 6, 3, 207, 123, 47, 33, 132, 56, 146, 82, 2, 226, 182, 223, 167, 189 },
                            PhoneNumber = "0123456789",
                            PhotoUrl = "abc",
                            UserName = "vi1"
                        },
                        new
                        {
                            Id = new Guid("4e5e39dc-7a22-4787-9083-70335fa2489c"),
                            Address = "Long An",
                            DateOfBirth = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "vi2@gmail.com",
                            FullName = "Vĩ 2",
                            Gender = "Male",
                            PassWordHash = new byte[] { 214, 60, 177, 33, 255, 41, 161, 124, 50, 17, 187, 147, 154, 47, 205, 117, 90, 238, 120, 171, 28, 82, 140, 248, 10, 40, 122, 147, 208, 92, 198, 194, 203, 132, 140, 228, 178, 247, 187, 155, 212, 71, 237, 21, 31, 96, 148, 225, 110, 185, 253, 39, 55, 188, 250, 115, 127, 113, 175, 37, 163, 93, 107, 65 },
                            PassWordSalt = new byte[] { 36, 139, 73, 47, 115, 180, 117, 30, 239, 56, 252, 44, 140, 112, 36, 75, 156, 80, 205, 43, 65, 172, 240, 146, 228, 106, 83, 34, 215, 56, 191, 55, 135, 11, 200, 8, 8, 236, 17, 153, 138, 26, 93, 214, 77, 58, 87, 35, 228, 89, 230, 177, 153, 175, 157, 154, 238, 134, 95, 200, 249, 104, 114, 177, 249, 68, 237, 91, 235, 122, 114, 159, 198, 203, 156, 227, 153, 149, 247, 74, 139, 55, 210, 142, 195, 22, 152, 208, 210, 52, 75, 185, 115, 214, 32, 47, 47, 122, 217, 72, 182, 13, 72, 110, 146, 175, 27, 39, 69, 102, 98, 26, 6, 3, 207, 123, 47, 33, 132, 56, 146, 82, 2, 226, 182, 223, 167, 189 },
                            PhoneNumber = "0123456789",
                            PhotoUrl = "abc",
                            UserName = "vi2"
                        },
                        new
                        {
                            Id = new Guid("64863e62-104c-49ee-a57e-b066936d8e8d"),
                            Address = "Long An",
                            DateOfBirth = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "vi3@gmail.com",
                            FullName = "Vĩ 3",
                            Gender = "Male",
                            PassWordHash = new byte[] { 214, 60, 177, 33, 255, 41, 161, 124, 50, 17, 187, 147, 154, 47, 205, 117, 90, 238, 120, 171, 28, 82, 140, 248, 10, 40, 122, 147, 208, 92, 198, 194, 203, 132, 140, 228, 178, 247, 187, 155, 212, 71, 237, 21, 31, 96, 148, 225, 110, 185, 253, 39, 55, 188, 250, 115, 127, 113, 175, 37, 163, 93, 107, 65 },
                            PassWordSalt = new byte[] { 36, 139, 73, 47, 115, 180, 117, 30, 239, 56, 252, 44, 140, 112, 36, 75, 156, 80, 205, 43, 65, 172, 240, 146, 228, 106, 83, 34, 215, 56, 191, 55, 135, 11, 200, 8, 8, 236, 17, 153, 138, 26, 93, 214, 77, 58, 87, 35, 228, 89, 230, 177, 153, 175, 157, 154, 238, 134, 95, 200, 249, 104, 114, 177, 249, 68, 237, 91, 235, 122, 114, 159, 198, 203, 156, 227, 153, 149, 247, 74, 139, 55, 210, 142, 195, 22, 152, 208, 210, 52, 75, 185, 115, 214, 32, 47, 47, 122, 217, 72, 182, 13, 72, 110, 146, 175, 27, 39, 69, 102, 98, 26, 6, 3, 207, 123, 47, 33, 132, 56, 146, 82, 2, 226, 182, 223, 167, 189 },
                            PhoneNumber = "0123456789",
                            PhotoUrl = "abc",
                            UserName = "vi3"
                        },
                        new
                        {
                            Id = new Guid("af7a0942-0459-4364-b8c8-3737a4edfff4"),
                            Address = "Long An",
                            DateOfBirth = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "vi4@gmail.com",
                            FullName = "Vĩ 4",
                            Gender = "Male",
                            PassWordHash = new byte[] { 214, 60, 177, 33, 255, 41, 161, 124, 50, 17, 187, 147, 154, 47, 205, 117, 90, 238, 120, 171, 28, 82, 140, 248, 10, 40, 122, 147, 208, 92, 198, 194, 203, 132, 140, 228, 178, 247, 187, 155, 212, 71, 237, 21, 31, 96, 148, 225, 110, 185, 253, 39, 55, 188, 250, 115, 127, 113, 175, 37, 163, 93, 107, 65 },
                            PassWordSalt = new byte[] { 36, 139, 73, 47, 115, 180, 117, 30, 239, 56, 252, 44, 140, 112, 36, 75, 156, 80, 205, 43, 65, 172, 240, 146, 228, 106, 83, 34, 215, 56, 191, 55, 135, 11, 200, 8, 8, 236, 17, 153, 138, 26, 93, 214, 77, 58, 87, 35, 228, 89, 230, 177, 153, 175, 157, 154, 238, 134, 95, 200, 249, 104, 114, 177, 249, 68, 237, 91, 235, 122, 114, 159, 198, 203, 156, 227, 153, 149, 247, 74, 139, 55, 210, 142, 195, 22, 152, 208, 210, 52, 75, 185, 115, 214, 32, 47, 47, 122, 217, 72, 182, 13, 72, 110, 146, 175, 27, 39, 69, 102, 98, 26, 6, 3, 207, 123, 47, 33, 132, 56, 146, 82, 2, 226, 182, 223, 167, 189 },
                            PhoneNumber = "0123456789",
                            PhotoUrl = "abc",
                            UserName = "vi4"
                        },
                        new
                        {
                            Id = new Guid("5ddd65ff-16a1-4fd1-acbf-c913f0cce37c"),
                            Address = "Long An",
                            DateOfBirth = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "vi5@gmail.com",
                            FullName = "Vĩ 5",
                            Gender = "Male",
                            PassWordHash = new byte[] { 214, 60, 177, 33, 255, 41, 161, 124, 50, 17, 187, 147, 154, 47, 205, 117, 90, 238, 120, 171, 28, 82, 140, 248, 10, 40, 122, 147, 208, 92, 198, 194, 203, 132, 140, 228, 178, 247, 187, 155, 212, 71, 237, 21, 31, 96, 148, 225, 110, 185, 253, 39, 55, 188, 250, 115, 127, 113, 175, 37, 163, 93, 107, 65 },
                            PassWordSalt = new byte[] { 36, 139, 73, 47, 115, 180, 117, 30, 239, 56, 252, 44, 140, 112, 36, 75, 156, 80, 205, 43, 65, 172, 240, 146, 228, 106, 83, 34, 215, 56, 191, 55, 135, 11, 200, 8, 8, 236, 17, 153, 138, 26, 93, 214, 77, 58, 87, 35, 228, 89, 230, 177, 153, 175, 157, 154, 238, 134, 95, 200, 249, 104, 114, 177, 249, 68, 237, 91, 235, 122, 114, 159, 198, 203, 156, 227, 153, 149, 247, 74, 139, 55, 210, 142, 195, 22, 152, 208, 210, 52, 75, 185, 115, 214, 32, 47, 47, 122, 217, 72, 182, 13, 72, 110, 146, 175, 27, 39, 69, 102, 98, 26, 6, 3, 207, 123, 47, 33, 132, 56, 146, 82, 2, 226, 182, 223, 167, 189 },
                            PhoneNumber = "0123456789",
                            PhotoUrl = "abc",
                            UserName = "vi5"
                        },
                        new
                        {
                            Id = new Guid("ae50067c-00bc-49e2-a20c-500696a2f954"),
                            Address = "Long An",
                            DateOfBirth = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "vi6@gmail.com",
                            FullName = "Vĩ 1",
                            Gender = "Male",
                            PassWordHash = new byte[] { 214, 60, 177, 33, 255, 41, 161, 124, 50, 17, 187, 147, 154, 47, 205, 117, 90, 238, 120, 171, 28, 82, 140, 248, 10, 40, 122, 147, 208, 92, 198, 194, 203, 132, 140, 228, 178, 247, 187, 155, 212, 71, 237, 21, 31, 96, 148, 225, 110, 185, 253, 39, 55, 188, 250, 115, 127, 113, 175, 37, 163, 93, 107, 65 },
                            PassWordSalt = new byte[] { 36, 139, 73, 47, 115, 180, 117, 30, 239, 56, 252, 44, 140, 112, 36, 75, 156, 80, 205, 43, 65, 172, 240, 146, 228, 106, 83, 34, 215, 56, 191, 55, 135, 11, 200, 8, 8, 236, 17, 153, 138, 26, 93, 214, 77, 58, 87, 35, 228, 89, 230, 177, 153, 175, 157, 154, 238, 134, 95, 200, 249, 104, 114, 177, 249, 68, 237, 91, 235, 122, 114, 159, 198, 203, 156, 227, 153, 149, 247, 74, 139, 55, 210, 142, 195, 22, 152, 208, 210, 52, 75, 185, 115, 214, 32, 47, 47, 122, 217, 72, 182, 13, 72, 110, 146, 175, 27, 39, 69, 102, 98, 26, 6, 3, 207, 123, 47, 33, 132, 56, 146, 82, 2, 226, 182, 223, 167, 189 },
                            PhoneNumber = "0123456789",
                            PhotoUrl = "abc",
                            UserName = "vi1"
                        },
                        new
                        {
                            Id = new Guid("75653469-5fdd-4639-9be7-2c8fca8cecc5"),
                            Address = "Long An",
                            DateOfBirth = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "vi7@gmail.com",
                            FullName = "Vĩ 7",
                            Gender = "Male",
                            PassWordHash = new byte[] { 214, 60, 177, 33, 255, 41, 161, 124, 50, 17, 187, 147, 154, 47, 205, 117, 90, 238, 120, 171, 28, 82, 140, 248, 10, 40, 122, 147, 208, 92, 198, 194, 203, 132, 140, 228, 178, 247, 187, 155, 212, 71, 237, 21, 31, 96, 148, 225, 110, 185, 253, 39, 55, 188, 250, 115, 127, 113, 175, 37, 163, 93, 107, 65 },
                            PassWordSalt = new byte[] { 36, 139, 73, 47, 115, 180, 117, 30, 239, 56, 252, 44, 140, 112, 36, 75, 156, 80, 205, 43, 65, 172, 240, 146, 228, 106, 83, 34, 215, 56, 191, 55, 135, 11, 200, 8, 8, 236, 17, 153, 138, 26, 93, 214, 77, 58, 87, 35, 228, 89, 230, 177, 153, 175, 157, 154, 238, 134, 95, 200, 249, 104, 114, 177, 249, 68, 237, 91, 235, 122, 114, 159, 198, 203, 156, 227, 153, 149, 247, 74, 139, 55, 210, 142, 195, 22, 152, 208, 210, 52, 75, 185, 115, 214, 32, 47, 47, 122, 217, 72, 182, 13, 72, 110, 146, 175, 27, 39, 69, 102, 98, 26, 6, 3, 207, 123, 47, 33, 132, 56, 146, 82, 2, 226, 182, 223, 167, 189 },
                            PhoneNumber = "0123456789",
                            PhotoUrl = "abc",
                            UserName = "vi7"
                        });
                });

            modelBuilder.Entity("Models.OfficeClassRobotic.BuisnessObject.Attendance", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AttendStatus")
                        .HasColumnType("int");

                    b.Property<Guid>("ClassScheduleID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreateBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ClassScheduleID");

                    b.ToTable("Attendance");
                });

            modelBuilder.Entity("Models.OfficeClassRobotic.BuisnessObject.Class", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ClassName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreateBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("DayStudy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<TimeSpan?>("EndTime")
                        .HasColumnType("time");

                    b.Property<bool>("IsClassFinish")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<TimeSpan?>("StartTime")
                        .HasColumnType("time");

                    b.Property<Guid>("StudentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("SubjectId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("StudentId");

                    b.HasIndex("SubjectId");

                    b.ToTable("Classes");

                    b.HasData(
                        new
                        {
                            Id = new Guid("381d2e33-67e5-4ce5-b8cc-c39bd523fe8b"),
                            ClassName = "SE1603",
                            Created = new DateTime(2024, 3, 8, 11, 9, 7, 880, DateTimeKind.Local).AddTicks(4839),
                            DayStudy = "Thứ 2;Thứ 4",
                            EndTime = new TimeSpan(0, 18, 0, 0, 0),
                            IsClassFinish = false,
                            IsDeleted = false,
                            StartTime = new TimeSpan(0, 15, 0, 0, 0),
                            StudentId = new Guid("2b9d9aca-27da-415b-a468-b367613a2488"),
                            SubjectId = new Guid("54eebe9e-2a5b-4a82-8522-1e7cd2aa4d57")
                        });
                });

            modelBuilder.Entity("Models.OfficeClassRobotic.BuisnessObject.ClassSchedule", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ClassId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ClassRoomID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreateBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateStudy")
                        .HasColumnType("datetime2");

                    b.Property<TimeSpan?>("EndTime")
                        .HasColumnType("time");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("NumberOfSudent")
                        .HasColumnType("int");

                    b.Property<TimeSpan?>("StartTime")
                        .HasColumnType("time");

                    b.Property<Guid>("TeacherId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ClassId");

                    b.HasIndex("ClassRoomID");

                    b.HasIndex("TeacherId");

                    b.ToTable("ClassSchedule");

                    b.HasData(
                        new
                        {
                            Id = new Guid("4e1cba33-b0cf-4274-8797-6ab39788141f"),
                            ClassId = new Guid("381d2e33-67e5-4ce5-b8cc-c39bd523fe8b"),
                            ClassRoomID = new Guid("d2e283a6-5bf5-4d27-a2c2-994cb6d781e9"),
                            Created = new DateTime(2024, 3, 8, 11, 9, 7, 879, DateTimeKind.Local).AddTicks(3490),
                            DateStudy = new DateTime(2024, 3, 8, 11, 9, 7, 879, DateTimeKind.Local).AddTicks(3492),
                            IsDeleted = false,
                            NumberOfSudent = 40,
                            TeacherId = new Guid("776afbe6-9133-4dbe-b8c0-f5a23f3fe505")
                        });
                });

            modelBuilder.Entity("Models.OfficeClassRobotic.BuisnessObject.Classroom", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ClassRoomName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreateBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("TrungTamRoboticId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("TrungTamRoboticId");

                    b.ToTable("Classrooms");

                    b.HasData(
                        new
                        {
                            Id = new Guid("d2e283a6-5bf5-4d27-a2c2-994cb6d781e9"),
                            ClassRoomName = "P.403",
                            Created = new DateTime(2024, 3, 8, 11, 9, 7, 880, DateTimeKind.Local).AddTicks(4735),
                            Description = "Tầng 4, phòng số 3",
                            IsDeleted = false,
                            TrungTamRoboticId = new Guid("5f4e0944-497b-4c33-9d5d-86f8824c8b95")
                        },
                        new
                        {
                            Id = new Guid("5f59c98d-50f9-4f5e-911e-d28648ec43b1"),
                            ClassRoomName = "P.303",
                            Created = new DateTime(2024, 3, 8, 11, 9, 7, 880, DateTimeKind.Local).AddTicks(4740),
                            Description = "Tầng 3, phòng số 3",
                            IsDeleted = false,
                            TrungTamRoboticId = new Guid("5f4e0944-497b-4c33-9d5d-86f8824c8b95")
                        },
                        new
                        {
                            Id = new Guid("29f67cfd-ba37-4b70-852a-4af223b7788a"),
                            ClassRoomName = "P.203",
                            Created = new DateTime(2024, 3, 8, 11, 9, 7, 880, DateTimeKind.Local).AddTicks(4743),
                            Description = "Tầng 2, phòng số 3",
                            IsDeleted = false,
                            TrungTamRoboticId = new Guid("5f4e0944-497b-4c33-9d5d-86f8824c8b95")
                        },
                        new
                        {
                            Id = new Guid("a9770be8-9b13-4d63-a78d-c9d2efaa79ec"),
                            ClassRoomName = "P.103",
                            Created = new DateTime(2024, 3, 8, 11, 9, 7, 880, DateTimeKind.Local).AddTicks(4747),
                            Description = "Tầng 1, phòng số 3",
                            IsDeleted = false,
                            TrungTamRoboticId = new Guid("5f4e0944-497b-4c33-9d5d-86f8824c8b95")
                        });
                });

            modelBuilder.Entity("Models.OfficeClassRobotic.BuisnessObject.Device", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ClassRoomId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreateBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DeviceName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double?>("PriceOfDevice")
                        .HasColumnType("float");

                    b.Property<bool?>("StatusOfDevice")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("ClassRoomId");

                    b.ToTable("Devices");
                });

            modelBuilder.Entity("Models.OfficeClassRobotic.BuisnessObject.FeedBack", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreateBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FeedBackName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("StudentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("TeacherId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("TeacherId");

                    b.ToTable("FeedBacks");
                });

            modelBuilder.Entity("Models.OfficeClassRobotic.BuisnessObject.GiaoTrinh", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreateBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FilePDF")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("GiaoTrinhName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("GiaoTrinhs");

                    b.HasData(
                        new
                        {
                            Id = new Guid("c12ea77c-c707-44c0-b3ce-420f2ff4ecd9"),
                            Created = new DateTime(2024, 3, 8, 11, 9, 7, 879, DateTimeKind.Local).AddTicks(3179),
                            Description = "",
                            FilePDF = "firebaseStorage",
                            GiaoTrinhName = "Toan cao cap 10",
                            IsDeleted = false
                        });
                });

            modelBuilder.Entity("Models.OfficeClassRobotic.BuisnessObject.Parent", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AppUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreateBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AppUserId");

                    b.ToTable("Parents");
                });

            modelBuilder.Entity("Models.OfficeClassRobotic.BuisnessObject.Staff", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AppUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreateBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AppUserId");

                    b.ToTable("Staffs");
                });

            modelBuilder.Entity("Models.OfficeClassRobotic.BuisnessObject.Student", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AppUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreateBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("ParentId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("AppUserId");

                    b.ToTable("Students");

                    b.HasData(
                        new
                        {
                            Id = new Guid("2b9d9aca-27da-415b-a468-b367613a2488"),
                            AppUserId = new Guid("2a22d7f6-6d94-4587-84d2-921c78970a91"),
                            Created = new DateTime(2024, 3, 8, 11, 9, 7, 879, DateTimeKind.Local).AddTicks(3895),
                            IsDeleted = false,
                            ParentId = new Guid("00000000-0000-0000-0000-000000000000")
                        },
                        new
                        {
                            Id = new Guid("3ce37d46-18e9-492d-a28e-2665b0d95a64"),
                            AppUserId = new Guid("75653469-5fdd-4639-9be7-2c8fca8cecc5"),
                            Created = new DateTime(2024, 3, 8, 11, 9, 7, 880, DateTimeKind.Local).AddTicks(4675),
                            IsDeleted = false,
                            ParentId = new Guid("00000000-0000-0000-0000-000000000000")
                        },
                        new
                        {
                            Id = new Guid("a2cd9f87-17f7-45cc-a9da-88502a010042"),
                            AppUserId = new Guid("ae50067c-00bc-49e2-a20c-500696a2f954"),
                            Created = new DateTime(2024, 3, 8, 11, 9, 7, 880, DateTimeKind.Local).AddTicks(4679),
                            IsDeleted = false,
                            ParentId = new Guid("00000000-0000-0000-0000-000000000000")
                        },
                        new
                        {
                            Id = new Guid("fec8b32d-bc9a-4fbb-94e6-5871e3ee9a63"),
                            AppUserId = new Guid("5ddd65ff-16a1-4fd1-acbf-c913f0cce37c"),
                            Created = new DateTime(2024, 3, 8, 11, 9, 7, 880, DateTimeKind.Local).AddTicks(4682),
                            IsDeleted = false,
                            ParentId = new Guid("00000000-0000-0000-0000-000000000000")
                        },
                        new
                        {
                            Id = new Guid("88de6bcd-e510-40d8-8f29-a06009cb195c"),
                            AppUserId = new Guid("5ddd65ff-16a1-4fd1-acbf-c913f0cce37c"),
                            Created = new DateTime(2024, 3, 8, 11, 9, 7, 880, DateTimeKind.Local).AddTicks(4686),
                            IsDeleted = false,
                            ParentId = new Guid("00000000-0000-0000-0000-000000000000")
                        },
                        new
                        {
                            Id = new Guid("07c7d0e7-273e-4819-ad69-0a875ef8f021"),
                            AppUserId = new Guid("64863e62-104c-49ee-a57e-b066936d8e8d"),
                            Created = new DateTime(2024, 3, 8, 11, 9, 7, 880, DateTimeKind.Local).AddTicks(4689),
                            IsDeleted = false,
                            ParentId = new Guid("00000000-0000-0000-0000-000000000000")
                        },
                        new
                        {
                            Id = new Guid("2b295a2a-4bf5-45c1-bf87-4e04f1eff028"),
                            AppUserId = new Guid("4e5e39dc-7a22-4787-9083-70335fa2489c"),
                            Created = new DateTime(2024, 3, 8, 11, 9, 7, 880, DateTimeKind.Local).AddTicks(4692),
                            IsDeleted = false,
                            ParentId = new Guid("00000000-0000-0000-0000-000000000000")
                        },
                        new
                        {
                            Id = new Guid("822eb9c1-d410-4e17-9b70-bb8512112ae3"),
                            AppUserId = new Guid("275c605e-3d04-437d-8a7d-208249412cec"),
                            Created = new DateTime(2024, 3, 8, 11, 9, 7, 880, DateTimeKind.Local).AddTicks(4695),
                            IsDeleted = false,
                            ParentId = new Guid("00000000-0000-0000-0000-000000000000")
                        });
                });

            modelBuilder.Entity("Models.OfficeClassRobotic.BuisnessObject.Subject", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreateBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("GiaoTrinhId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SubjectName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TotalSlots")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("GiaoTrinhId")
                        .IsUnique();

                    b.ToTable("Subjects");

                    b.HasData(
                        new
                        {
                            Id = new Guid("54eebe9e-2a5b-4a82-8522-1e7cd2aa4d57"),
                            Created = new DateTime(2024, 3, 8, 11, 9, 7, 879, DateTimeKind.Local).AddTicks(3442),
                            GiaoTrinhId = new Guid("c12ea77c-c707-44c0-b3ce-420f2ff4ecd9"),
                            IsDeleted = false,
                            SubjectName = "Toan 10",
                            TotalSlots = 21
                        });
                });

            modelBuilder.Entity("Models.OfficeClassRobotic.BuisnessObject.Teacher", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AppUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreateBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AppUserId");

                    b.ToTable("Teacher");

                    b.HasData(
                        new
                        {
                            Id = new Guid("776afbe6-9133-4dbe-b8c0-f5a23f3fe505"),
                            AppUserId = new Guid("bf835a7d-d002-4c9f-8bd6-0e2d321447c4"),
                            Created = new DateTime(2024, 3, 8, 11, 9, 7, 880, DateTimeKind.Local).AddTicks(4778),
                            IsDeleted = false
                        },
                        new
                        {
                            Id = new Guid("53525c34-3437-4b3b-946c-e9be0a60c0c3"),
                            AppUserId = new Guid("45b82e13-b1fc-425d-a2b3-8b821405bfd0"),
                            Created = new DateTime(2024, 3, 8, 11, 9, 7, 880, DateTimeKind.Local).AddTicks(4782),
                            IsDeleted = false
                        });
                });

            modelBuilder.Entity("Models.OfficeClassRobotic.BuisnessObject.TrungTamRobotic", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreateBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("TrungTamRobotics");

                    b.HasData(
                        new
                        {
                            Id = new Guid("5f4e0944-497b-4c33-9d5d-86f8824c8b95"),
                            Address = "123 Nguyễn Ảnh Thủ, Hóc Môn",
                            Created = new DateTime(2024, 3, 8, 11, 9, 7, 879, DateTimeKind.Local).AddTicks(3538),
                            IsDeleted = false,
                            Name = "Trung Tâm Robotic cơ sở 3"
                        });
                });

            modelBuilder.Entity("OfficeClassRobotic.BuisnessObject.Models.AppUserRole", b =>
                {
                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AppUserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("RoleId", "AppUserId");

                    b.HasIndex("AppUserId");

                    b.ToTable("AppUserRoles");

                    b.HasData(
                        new
                        {
                            RoleId = new Guid("891e4e1c-bed5-4992-a978-fc969fdaf128"),
                            AppUserId = new Guid("da053af4-cdf1-4a6b-8506-2e3939ef6351")
                        });
                });

            modelBuilder.Entity("OfficeClassRobotic.BuisnessObject.Models.RefreshToken", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AppUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreateBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ExpiredAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsRevoked")
                        .HasColumnType("bit");

                    b.Property<bool>("IsUsed")
                        .HasColumnType("bit");

                    b.Property<DateTime>("IssuedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("JwtId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RefreshTOken")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UsageCount")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AppUserId");

                    b.ToTable("RefreshToken");
                });

            modelBuilder.Entity("OfficeClassRobotic.BuisnessObject.Models.Role", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreateBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            Id = new Guid("b308c9a8-9a44-4662-b010-e4688fb8e019"),
                            Created = new DateTime(2024, 3, 8, 11, 9, 7, 880, DateTimeKind.Local).AddTicks(4512),
                            IsDeleted = false,
                            RoleName = "Student"
                        },
                        new
                        {
                            Id = new Guid("1c477667-fbc0-4c85-9d2f-1f5a6da3edac"),
                            Created = new DateTime(2024, 3, 8, 11, 9, 7, 880, DateTimeKind.Local).AddTicks(4515),
                            IsDeleted = false,
                            RoleName = "Parent"
                        },
                        new
                        {
                            Id = new Guid("dc1c58f1-326b-43c0-a750-263bceee32be"),
                            Created = new DateTime(2024, 3, 8, 11, 9, 7, 880, DateTimeKind.Local).AddTicks(4518),
                            IsDeleted = false,
                            RoleName = "Staff"
                        },
                        new
                        {
                            Id = new Guid("891e4e1c-bed5-4992-a978-fc969fdaf128"),
                            Created = new DateTime(2024, 3, 8, 11, 9, 7, 880, DateTimeKind.Local).AddTicks(4521),
                            IsDeleted = false,
                            RoleName = "Admin"
                        },
                        new
                        {
                            Id = new Guid("433ca17d-2bb8-4a98-91e6-5703365cb2fd"),
                            Created = new DateTime(2024, 3, 8, 11, 9, 7, 880, DateTimeKind.Local).AddTicks(4533),
                            IsDeleted = false,
                            RoleName = "Teacher"
                        },
                        new
                        {
                            Id = new Guid("a53d0cca-65d1-4b81-afe2-e735facd6c38"),
                            Created = new DateTime(2024, 3, 8, 11, 9, 7, 880, DateTimeKind.Local).AddTicks(4536),
                            IsDeleted = false,
                            RoleName = "TrungTamRobotic"
                        });
                });

            modelBuilder.Entity("OfficeClassRobotic.BuisnessObject.Models.StudentGrade", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AssesessmentType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("ClassId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreateBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<double>("Grade")
                        .HasColumnType("float");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ClassId");

                    b.ToTable("StudentGrades");
                });

            modelBuilder.Entity("OfficeClassRobotic.BuisnessObject.Models.SubjectGradingWeight", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AssesessmentType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreateBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("SubjectID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("WeightPercentage")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("SubjectID");

                    b.ToTable("SubjectGradingWeights");
                });

            modelBuilder.Entity("OfficeClassRobotic.BuisnessObject.Models.TeacherSubject", b =>
                {
                    b.Property<Guid>("SubjectId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("TeacherId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.HasKey("SubjectId", "TeacherId");

                    b.HasIndex("TeacherId");

                    b.ToTable("TeacherSubjects");

                    b.HasData(
                        new
                        {
                            SubjectId = new Guid("54eebe9e-2a5b-4a82-8522-1e7cd2aa4d57"),
                            TeacherId = new Guid("776afbe6-9133-4dbe-b8c0-f5a23f3fe505"),
                            IsDeleted = false
                        },
                        new
                        {
                            SubjectId = new Guid("54eebe9e-2a5b-4a82-8522-1e7cd2aa4d57"),
                            TeacherId = new Guid("53525c34-3437-4b3b-946c-e9be0a60c0c3"),
                            IsDeleted = false
                        });
                });

            modelBuilder.Entity("Models.OfficeClassRobotic.BuisnessObject.Admin", b =>
                {
                    b.HasOne("Models.OfficeClassRobotic.BuisnessObject.AppUser", "AppUser")
                        .WithMany()
                        .HasForeignKey("AppUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AppUser");
                });

            modelBuilder.Entity("Models.OfficeClassRobotic.BuisnessObject.Attendance", b =>
                {
                    b.HasOne("Models.OfficeClassRobotic.BuisnessObject.ClassSchedule", "ClassSchedule")
                        .WithMany()
                        .HasForeignKey("ClassScheduleID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ClassSchedule");
                });

            modelBuilder.Entity("Models.OfficeClassRobotic.BuisnessObject.Class", b =>
                {
                    b.HasOne("Models.OfficeClassRobotic.BuisnessObject.Student", "Student")
                        .WithMany("Classs")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Models.OfficeClassRobotic.BuisnessObject.Subject", "Subject")
                        .WithMany("Class")
                        .HasForeignKey("SubjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Student");

                    b.Navigation("Subject");
                });

            modelBuilder.Entity("Models.OfficeClassRobotic.BuisnessObject.ClassSchedule", b =>
                {
                    b.HasOne("Models.OfficeClassRobotic.BuisnessObject.Class", "Class")
                        .WithMany("ClassSchedule")
                        .HasForeignKey("ClassId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Models.OfficeClassRobotic.BuisnessObject.Classroom", "Classroom")
                        .WithMany("ClassSchedules")
                        .HasForeignKey("ClassRoomID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Models.OfficeClassRobotic.BuisnessObject.Teacher", "Teacher")
                        .WithMany("ClassSchedule")
                        .HasForeignKey("TeacherId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Class");

                    b.Navigation("Classroom");

                    b.Navigation("Teacher");
                });

            modelBuilder.Entity("Models.OfficeClassRobotic.BuisnessObject.Classroom", b =>
                {
                    b.HasOne("Models.OfficeClassRobotic.BuisnessObject.TrungTamRobotic", "TrungTamRobotic")
                        .WithMany("Classrooms")
                        .HasForeignKey("TrungTamRoboticId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TrungTamRobotic");
                });

            modelBuilder.Entity("Models.OfficeClassRobotic.BuisnessObject.Device", b =>
                {
                    b.HasOne("Models.OfficeClassRobotic.BuisnessObject.Classroom", "Classroom")
                        .WithMany("Devices")
                        .HasForeignKey("ClassRoomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Classroom");
                });

            modelBuilder.Entity("Models.OfficeClassRobotic.BuisnessObject.FeedBack", b =>
                {
                    b.HasOne("Models.OfficeClassRobotic.BuisnessObject.Teacher", "Teacher")
                        .WithMany("Feedbacks")
                        .HasForeignKey("TeacherId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Teacher");
                });

            modelBuilder.Entity("Models.OfficeClassRobotic.BuisnessObject.Parent", b =>
                {
                    b.HasOne("Models.OfficeClassRobotic.BuisnessObject.AppUser", "AppUser")
                        .WithMany()
                        .HasForeignKey("AppUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AppUser");
                });

            modelBuilder.Entity("Models.OfficeClassRobotic.BuisnessObject.Staff", b =>
                {
                    b.HasOne("Models.OfficeClassRobotic.BuisnessObject.AppUser", "AppUser")
                        .WithMany()
                        .HasForeignKey("AppUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AppUser");
                });

            modelBuilder.Entity("Models.OfficeClassRobotic.BuisnessObject.Student", b =>
                {
                    b.HasOne("Models.OfficeClassRobotic.BuisnessObject.AppUser", "AppUser")
                        .WithMany()
                        .HasForeignKey("AppUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AppUser");
                });

            modelBuilder.Entity("Models.OfficeClassRobotic.BuisnessObject.Subject", b =>
                {
                    b.HasOne("Models.OfficeClassRobotic.BuisnessObject.GiaoTrinh", "GiaoTrinh")
                        .WithOne("Subject")
                        .HasForeignKey("Models.OfficeClassRobotic.BuisnessObject.Subject", "GiaoTrinhId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("GiaoTrinh");
                });

            modelBuilder.Entity("Models.OfficeClassRobotic.BuisnessObject.Teacher", b =>
                {
                    b.HasOne("Models.OfficeClassRobotic.BuisnessObject.AppUser", "AppUser")
                        .WithMany()
                        .HasForeignKey("AppUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AppUser");
                });

            modelBuilder.Entity("OfficeClassRobotic.BuisnessObject.Models.AppUserRole", b =>
                {
                    b.HasOne("Models.OfficeClassRobotic.BuisnessObject.AppUser", "AppUser")
                        .WithMany("AppUserRoles")
                        .HasForeignKey("AppUserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("OfficeClassRobotic.BuisnessObject.Models.Role", "Role")
                        .WithMany("AppUserRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("AppUser");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("OfficeClassRobotic.BuisnessObject.Models.RefreshToken", b =>
                {
                    b.HasOne("Models.OfficeClassRobotic.BuisnessObject.AppUser", "AppUser")
                        .WithMany()
                        .HasForeignKey("AppUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AppUser");
                });

            modelBuilder.Entity("OfficeClassRobotic.BuisnessObject.Models.StudentGrade", b =>
                {
                    b.HasOne("Models.OfficeClassRobotic.BuisnessObject.Class", "Class")
                        .WithMany()
                        .HasForeignKey("ClassId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Class");
                });

            modelBuilder.Entity("OfficeClassRobotic.BuisnessObject.Models.SubjectGradingWeight", b =>
                {
                    b.HasOne("Models.OfficeClassRobotic.BuisnessObject.Subject", "Subject")
                        .WithMany()
                        .HasForeignKey("SubjectID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Subject");
                });

            modelBuilder.Entity("OfficeClassRobotic.BuisnessObject.Models.TeacherSubject", b =>
                {
                    b.HasOne("Models.OfficeClassRobotic.BuisnessObject.Subject", "Subject")
                        .WithMany("TeacherSubjects")
                        .HasForeignKey("SubjectId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Models.OfficeClassRobotic.BuisnessObject.Teacher", "Teacher")
                        .WithMany("TeacherSubjects")
                        .HasForeignKey("TeacherId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Subject");

                    b.Navigation("Teacher");
                });

            modelBuilder.Entity("Models.OfficeClassRobotic.BuisnessObject.AppUser", b =>
                {
                    b.Navigation("AppUserRoles");
                });

            modelBuilder.Entity("Models.OfficeClassRobotic.BuisnessObject.Class", b =>
                {
                    b.Navigation("ClassSchedule");
                });

            modelBuilder.Entity("Models.OfficeClassRobotic.BuisnessObject.Classroom", b =>
                {
                    b.Navigation("ClassSchedules");

                    b.Navigation("Devices");
                });

            modelBuilder.Entity("Models.OfficeClassRobotic.BuisnessObject.GiaoTrinh", b =>
                {
                    b.Navigation("Subject");
                });

            modelBuilder.Entity("Models.OfficeClassRobotic.BuisnessObject.Student", b =>
                {
                    b.Navigation("Classs");
                });

            modelBuilder.Entity("Models.OfficeClassRobotic.BuisnessObject.Subject", b =>
                {
                    b.Navigation("Class");

                    b.Navigation("TeacherSubjects");
                });

            modelBuilder.Entity("Models.OfficeClassRobotic.BuisnessObject.Teacher", b =>
                {
                    b.Navigation("ClassSchedule");

                    b.Navigation("Feedbacks");

                    b.Navigation("TeacherSubjects");
                });

            modelBuilder.Entity("Models.OfficeClassRobotic.BuisnessObject.TrungTamRobotic", b =>
                {
                    b.Navigation("Classrooms");
                });

            modelBuilder.Entity("OfficeClassRobotic.BuisnessObject.Models.Role", b =>
                {
                    b.Navigation("AppUserRoles");
                });
#pragma warning restore 612, 618
        }
    }
}
